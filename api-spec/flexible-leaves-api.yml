openapi: 3.0.0
info:
  title: Flexible Leaves API
  version: 1.0.0
  description: API Description for leave management app
servers:
  - url: http://localhost:3000
paths:
  /2fa/setup:
    post:
      summary: Initialize 2FA Setup
      description: >-
        Generates a QR code and a temporary secret to start the two-factor
        authentication setup process.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 2FA setup initialized with QR code and secret.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFASetupResponse'
        '401':
          description: Unauthorized - Missing or invalid authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
  /2fa/verify-setup:
    post:
      summary: Verify 2FA Setup Code
      description: Verifies the TOTP code to confirm two-factor authentication setup.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify2FACodeRequest'
      responses:
        '200':
          description: Two-factor authentication enabled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '400':
          description: Invalid two-factor authentication code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '401':
          description: Unauthorized - Missing or invalid authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
  /2fa/disable:
    delete:
      summary: Disable Two-Factor Authentication
      description: Disables 2FA for the current user and removes the 2FA secret.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Two-factor authentication disabled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '400':
          description: Failed to disable two-factor authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '401':
          description: Unauthorized - Missing or invalid authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
  /2fa/recover:
    post:
      summary: Request 2FA Recovery
      description: Sends a recovery email to users who lost access to their 2FA device.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recover2FARequest'
      responses:
        '200':
          description: Recovery email sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '400':
          description: Invalid email or request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
  /2fa/confirm-recover:
    post:
      summary: Confirm 2FA Recovery
      description: Confirms 2FA reset by verifying the recovery token sent via email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmRecover2FARequest'
      responses:
        '200':
          description: Two-factor authentication recovery confirmed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '400':
          description: Invalid or expired recovery token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
        '401':
          description: Unauthorized - Missing or invalid authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
  /auth/signup:
    post:
      summary: User Signup
      description: Registers a new user and saves them to the database with admin role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: User created successfully.
                    severity: success
        '500':
          description: Server error during signup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/verify-signup:
    post:
      summary: Verify Signup Token
      description: Verifies a user's signup token and activates their account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTokenRequest'
      responses:
        '200':
          description: Token verified and user activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Signup verified successfully.
                    severity: success
        '400':
          description: Invalid or expired token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Invalid or expired verification token.
                    severity: error
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: User not found.
                    severity: error
        '500':
          description: Server error during verification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/login:
    post:
      summary: User Login
      description: >-
        Generates a session token for the user and sets it in an HTTP-only
        cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: >-
            Login successful, session token set in cookie and user info
            returned.
          headers:
            Set-Cookie:
              description: HTTP-only session cookie containing the session token.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation errors in login data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Password must contain at least one uppercase letter
                    severity: error
        '401':
          description: Incorrect email or password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Incorrect email or password.
                    severity: error
        '500':
          description: Server error during login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/logout:
    post:
      summary: User Logout
      description: Logs out the user by deleting the session cookie.
      responses:
        '204':
          description: Logout successful, session cookie deleted.
        '500':
          description: Server error during logout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/refresh:
    post:
      summary: Refresh Access Token
      description: >-
        Refreshes the access token using a valid refresh token stored in
        cookies. Requires authentication.
      responses:
        '204':
          description: Access token refreshed successfully. No content returned.
        '403':
          description: Invalid or missing refresh token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Invalid or missing refresh token.
                    severity: error
        '500':
          description: Server error during token refresh.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/reset-password/request:
    post:
      summary: Initiate Password Reset
      description: >-
        Sends a password reset email to the given email address. Always responds
        with 204 to avoid revealing user existence.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset not allowed (e.g., user inactive).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Password reset not allowed.
                    severity: warning
        '204':
          description: Password reset email sent if user exists and is active.
        '500':
          description: Server error during password reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/reset-password:
    post:
      summary: Complete Password Reset
      description: Resets the user's password using a valid reset token and a new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmResetPasswordRequest'
      responses:
        '204':
          description: Password successfully reset.
        '400':
          description: Invalid or expired token, or invalid password format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Invalid or expired reset token, or invalid password.
                    severity: error
        '500':
          description: Server error during password reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/accept-terms:
    post:
      summary: Accept Terms of Service
      description: >
        Marks the user's Terms of Service as accepted. Requires a valid session
        and refresh token. A new access token is issued with updated claims and
        sent via an HTTP-only cookie.
      responses:
        '204':
          description: Terms accepted successfully. New access token set in cookie.
          headers:
            Set-Cookie:
              description: HTTP-only cookie containing a new access token.
              schema:
                type: string
        '401':
          description: Unauthorized - session missing or expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: 'Unauthorized: session missing or expired.'
                    severity: error
        '403':
          description: Invalid or missing refresh token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Invalid or missing refresh token.
                    severity: error
        '500':
          description: Server error during terms acceptance or token generation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/verify-2fa:
    post:
      summary: Verify Two-Factor Authentication Code
      description: >-
        Verifies a 2FA code provided by the user during login. Requires an
        active session.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify2FARequest'
      responses:
        '200':
          description: >-
            2FA verification successful. Session updated and access token
            issued.
          headers:
            Set-Cookie:
              description: HTTP-only cookie containing the access token.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid or expired 2FA code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Invalid or expired two-factor authentication code.
                    severity: error
        '401':
          description: Unauthorized - session missing or expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: 'Unauthorized: session missing or expired.'
                    severity: error
        '500':
          description: Server error during 2FA verification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /auth/session:
    get:
      summary: Get current user session
      description: >-
        Returns the authenticated user's session information. Requires an active
        session.
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Current user session retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - session missing or expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: 'Unauthorized: session missing or expired.'
                    severity: error
        '500':
          description: Server error retrieving session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessageResponse'
              example:
                messages:
                  - text: Internal server error
                    severity: error
  /csrf/token:
    get:
      summary: Get CSRF token
      tags:
        - Security
      description: >
        Returns a CSRF token and sets a cookie named `XSRF-TOKEN`.<br>

        Include the returned token in the `x-csrf-token` header of all write
        (POST, PUT, PATCH, DELETE) requests.<br>

        This protects against Cross-Site Request Forgery attacks by validating
        state-changing requests.
      responses:
        '200':
          description: CSRF token returned successfully.
          headers:
            Set-Cookie:
              description: Cookie named `XSRF-TOKEN` containing the token.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsrfTokenResponse'
components:
  schemas:
    Message:
      type: object
      properties:
        text:
          type: string
          example: Operation completed successfully.
        severity:
          type: string
          enum:
            - error
            - warning
            - info
            - success
          example: success
      required:
        - text
        - severity
    ApiMessageResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
      required:
        - messages
    TwoFASetupResponse:
      type: object
      properties:
        qrCodeUrl:
          type: string
          format: uri
          example: >-
            otpauth://totp/MyApp:username@example.com?secret=ABCDEF123456&issuer=MyApp
        secret:
          type: string
          example: ABCDEF123456
    Verify2FACodeRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: '123456'
    Recover2FARequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: user@example.com
    ConfirmRecover2FARequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: abc123def456
    SignupRequest:
      type: object
      required:
        - email
        - password
        - termsAccepted
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: $SuperSecurePassword123
        termsAccepted:
          type: boolean
          example: true
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: dev@mail.com
        password:
          type: string
          example: $SuperSecurePassword45
    Verify2FARequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: '123456'
    VerifyTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: signup-verification-token-here
    ResetPasswordRequest:
      type: object
      required:
        - userEmail
      properties:
        userEmail:
          type: string
          example: user@example.com
    ConfirmResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        newPassword:
          type: string
          example: StrongNewPassword!2025
    User:
      type: object
      properties:
        id:
          type: integer
          example: 123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        role:
          type: string
          example: admin
        createdAt:
          type: string
          format: date-time
          example: '2023-01-01T12:00:00Z'
        enabled2FA:
          type: boolean
          nullable: true
          example: true
        status:
          type: string
          nullable: true
          example: active
    CsrfTokenResponse:
      type: object
      properties:
        csrfToken:
          type: string
          example: abc123csrfTOKEN456xyz
tags: []
