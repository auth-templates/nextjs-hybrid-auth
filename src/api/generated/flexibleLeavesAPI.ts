/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Flexible Leaves API
 * API Description for leave management app
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Post2faConfirmRecoverBody,
  Post2faRecoverBody,
  Post2faSetup200,
  Post2faVerifySetupBody,
  PostAuthLoginBody,
  PostAuthResetPasswordBody,
  PostAuthResetPasswordRequest200,
  PostAuthResetPasswordRequestBody,
  PostAuthSignupBody,
  PostAuthVerifySignupBody,
  User
} from './flexibleLeavesAPI.schemas';




  export const getFlexibleLeavesAPI = () => {
/**
 * Initiates the 2FA setup process by generating a QR code and a temporary secret for a TOTP app like Google Authenticator.
 * @summary Generates QR code and temporary secret for 2FA setup
 */
const post2faSetup = <TData = AxiosResponse<Post2faSetup200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/2fa/setup`,undefined,options
    );
  }

/**
 * Verifies the TOTP code to confirm 2FA setup with an authenticator app.
 * @summary Verifies the 2FA setup code
 */
const post2faVerifySetup = <TData = AxiosResponse<void>>(
    post2faVerifySetupBody: Post2faVerifySetupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/2fa/verify-setup`,
      post2faVerifySetupBody,options
    );
  }

/**
 * Disables two-factor authentication for the current user and deletes the 2FA secret from the database.
 * @summary Disables 2FA
 */
const delete2faDisable = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/2fa/disable`,options
    );
  }

/**
 * Requests a recovery process for users who are locked out due to losing access to their 2FA device (phone).
 * @summary Request email-based 2FA reset
 */
const post2faRecover = <TData = AxiosResponse<void>>(
    post2faRecoverBody: Post2faRecoverBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/2fa/recover`,
      post2faRecoverBody,options
    );
  }

/**
 * Confirms the reset process for 2FA by verifying the token sent to the user's email.
 * @summary Confirm 2FA reset
 */
const post2faConfirmRecover = <TData = AxiosResponse<void>>(
    post2faConfirmRecoverBody: Post2faConfirmRecoverBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/2fa/confirm-recover`,
      post2faConfirmRecoverBody,options
    );
  }

/**
 * Registers a new user and saves them to the database with admin role.
 * @summary User Signup
 */
const postAuthSignup = <TData = AxiosResponse<void>>(
    postAuthSignupBody: PostAuthSignupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/signup`,
      postAuthSignupBody,options
    );
  }

/**
 * Verifies a user's signup token and activates their account.
 * @summary Verify Signup Token
 */
const postAuthVerifySignup = <TData = AxiosResponse<void>>(
    postAuthVerifySignupBody: PostAuthVerifySignupBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/verify-signup`,
      postAuthVerifySignupBody,options
    );
  }

/**
 * Generates a session token for the user and sets it in an HTTP-only cookie.
 * @summary User Login
 */
const postAuthLogin = <TData = AxiosResponse<User>>(
    postAuthLoginBody: PostAuthLoginBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/login`,
      postAuthLoginBody,options
    );
  }

/**
 * Logs out the user by deleting the session cookie.
 * @summary User Logout
 */
const postAuthLogout = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/logout`,undefined,options
    );
  }

/**
 * Refreshes the access token using a valid refresh token stored in cookies. Requires authentication.
 * @summary Refresh Access Token
 */
const postAuthRefresh = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/refresh`,undefined,options
    );
  }

/**
 * Sends a password reset email to the given email address. Always responds with 204 to avoid revealing user existence.
 * @summary Initiate Password Reset
 */
const postAuthResetPasswordRequest = <TData = AxiosResponse<PostAuthResetPasswordRequest200 | void>>(
    postAuthResetPasswordRequestBody: PostAuthResetPasswordRequestBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/reset-password/request`,
      postAuthResetPasswordRequestBody,options
    );
  }

/**
 * Resets the user's password using a valid reset token and a new password.
 * @summary Complete Password Reset
 */
const postAuthResetPassword = <TData = AxiosResponse<void>>(
    postAuthResetPasswordBody: PostAuthResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/reset-password`,
      postAuthResetPasswordBody,options
    );
  }

return {post2faSetup,post2faVerifySetup,delete2faDisable,post2faRecover,post2faConfirmRecover,postAuthSignup,postAuthVerifySignup,postAuthLogin,postAuthLogout,postAuthRefresh,postAuthResetPasswordRequest,postAuthResetPassword}};
export type Post2faSetupResult = AxiosResponse<Post2faSetup200>
export type Post2faVerifySetupResult = AxiosResponse<void>
export type Delete2faDisableResult = AxiosResponse<void>
export type Post2faRecoverResult = AxiosResponse<void>
export type Post2faConfirmRecoverResult = AxiosResponse<void>
export type PostAuthSignupResult = AxiosResponse<void>
export type PostAuthVerifySignupResult = AxiosResponse<void>
export type PostAuthLoginResult = AxiosResponse<User>
export type PostAuthLogoutResult = AxiosResponse<void>
export type PostAuthRefreshResult = AxiosResponse<void>
export type PostAuthResetPasswordRequestResult = AxiosResponse<PostAuthResetPasswordRequest200 | void>
export type PostAuthResetPasswordResult = AxiosResponse<void>
