// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  Post2FaSetupData,
  Post2FaSetupResponses,
  Post2FaSetupErrors,
  Post2FaVerifySetupData,
  Post2FaVerifySetupResponses,
  Post2FaVerifySetupErrors,
  Delete2FaDisableData,
  Delete2FaDisableResponses,
  Delete2FaDisableErrors,
  Post2FaRecoverData,
  Post2FaRecoverResponses,
  Post2FaRecoverErrors,
  Post2FaConfirmRecoverData,
  Post2FaConfirmRecoverResponses,
  Post2FaConfirmRecoverErrors,
  PostAuthSignupData,
  PostAuthSignupResponses,
  PostAuthSignupErrors,
  PostAuthVerifySignupData,
  PostAuthVerifySignupResponses,
  PostAuthVerifySignupErrors,
  PostAuthLoginData,
  PostAuthLoginResponses,
  PostAuthLoginErrors,
  PostAuthLogoutData,
  PostAuthLogoutResponses,
  PostAuthLogoutErrors,
  PostAuthRefreshData,
  PostAuthRefreshResponses,
  PostAuthRefreshErrors,
  PostAuthResetPasswordRequestData,
  PostAuthResetPasswordRequestResponses,
  PostAuthResetPasswordRequestErrors,
  PostAuthResetPasswordData,
  PostAuthResetPasswordResponses,
  PostAuthResetPasswordErrors,
  PostAuthAcceptTermsData,
  PostAuthAcceptTermsResponses,
  PostAuthAcceptTermsErrors,
  PostAuthVerify2FaData,
  PostAuthVerify2FaResponses,
  PostAuthVerify2FaErrors,
  GetAuthSessionData,
  GetAuthSessionResponses,
  GetAuthSessionErrors,
  GetCsrfTokenData,
  GetCsrfTokenResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  postAuthLoginResponseTransformer,
  postAuthVerify2FaResponseTransformer,
  getAuthSessionResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Initialize 2FA Setup
 * Generates a QR code and a temporary secret to start the two-factor authentication setup process.
 */
export const post2FaSetup = <ThrowOnError extends boolean = false>(
  options?: Options<Post2FaSetupData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    Post2FaSetupResponses,
    Post2FaSetupErrors,
    ThrowOnError
  >({
    url: "/2fa/setup",
    ...options,
  });
};

/**
 * Verify 2FA Setup Code
 * Verifies the TOTP code to confirm two-factor authentication setup.
 */
export const post2FaVerifySetup = <ThrowOnError extends boolean = false>(
  options: Options<Post2FaVerifySetupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    Post2FaVerifySetupResponses,
    Post2FaVerifySetupErrors,
    ThrowOnError
  >({
    url: "/2fa/verify-setup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Disable Two-Factor Authentication
 * Disables 2FA for the current user and removes the 2FA secret.
 */
export const delete2FaDisable = <ThrowOnError extends boolean = false>(
  options?: Options<Delete2FaDisableData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    Delete2FaDisableResponses,
    Delete2FaDisableErrors,
    ThrowOnError
  >({
    url: "/2fa/disable",
    ...options,
  });
};

/**
 * Request 2FA Recovery
 * Sends a recovery email to users who lost access to their 2FA device.
 */
export const post2FaRecover = <ThrowOnError extends boolean = false>(
  options: Options<Post2FaRecoverData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    Post2FaRecoverResponses,
    Post2FaRecoverErrors,
    ThrowOnError
  >({
    url: "/2fa/recover",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Confirm 2FA Recovery
 * Confirms 2FA reset by verifying the recovery token sent via email.
 */
export const post2FaConfirmRecover = <ThrowOnError extends boolean = false>(
  options: Options<Post2FaConfirmRecoverData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    Post2FaConfirmRecoverResponses,
    Post2FaConfirmRecoverErrors,
    ThrowOnError
  >({
    url: "/2fa/confirm-recover",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * User Signup
 * Registers a new user and saves them to the database with admin role.
 */
export const postAuthSignup = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthSignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthSignupResponses,
    PostAuthSignupErrors,
    ThrowOnError
  >({
    url: "/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify Signup Token
 * Verifies a user's signup token and activates their account.
 */
export const postAuthVerifySignup = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthVerifySignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthVerifySignupResponses,
    PostAuthVerifySignupErrors,
    ThrowOnError
  >({
    url: "/auth/verify-signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * User Login
 * Generates a session token for the user and sets it in an HTTP-only cookie.
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthLoginResponses,
    PostAuthLoginErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthLoginResponseTransformer,
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * User Logout
 * Logs out the user by deleting the session cookie.
 */
export const postAuthLogout = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthLogoutResponses,
    PostAuthLogoutErrors,
    ThrowOnError
  >({
    url: "/auth/logout",
    ...options,
  });
};

/**
 * Refresh Access Token
 * Refreshes the access token using a valid refresh token stored in cookies. Requires authentication.
 */
export const postAuthRefresh = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthRefreshData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthRefreshResponses,
    PostAuthRefreshErrors,
    ThrowOnError
  >({
    url: "/auth/refresh",
    ...options,
  });
};

/**
 * Initiate Password Reset
 * Sends a password reset email to the given email address. Always responds with 204 to avoid revealing user existence.
 */
export const postAuthResetPasswordRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostAuthResetPasswordRequestData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthResetPasswordRequestResponses,
    PostAuthResetPasswordRequestErrors,
    ThrowOnError
  >({
    url: "/auth/reset-password/request",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Complete Password Reset
 * Resets the user's password using a valid reset token and a new password.
 */
export const postAuthResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthResetPasswordResponses,
    PostAuthResetPasswordErrors,
    ThrowOnError
  >({
    url: "/auth/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Accept Terms of Service
 * Marks the user's Terms of Service as accepted. Requires a valid session and refresh token. A new access token is issued with updated claims and sent via an HTTP-only cookie.
 *
 */
export const postAuthAcceptTerms = <ThrowOnError extends boolean = false>(
  options?: Options<PostAuthAcceptTermsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostAuthAcceptTermsResponses,
    PostAuthAcceptTermsErrors,
    ThrowOnError
  >({
    url: "/auth/accept-terms",
    ...options,
  });
};

/**
 * Verify Two-Factor Authentication Code
 * Verifies a 2FA code provided by the user during login. Requires an active session.
 */
export const postAuthVerify2Fa = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthVerify2FaData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthVerify2FaResponses,
    PostAuthVerify2FaErrors,
    ThrowOnError
  >({
    responseTransformer: postAuthVerify2FaResponseTransformer,
    url: "/auth/verify-2fa",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get current user session
 * Returns the authenticated user's session information. Requires an active session.
 */
export const getAuthSession = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthSessionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAuthSessionResponses,
    GetAuthSessionErrors,
    ThrowOnError
  >({
    responseTransformer: getAuthSessionResponseTransformer,
    url: "/auth/session",
    ...options,
  });
};

/**
 * Get CSRF token
 * Returns a CSRF token and sets a cookie named `XSRF-TOKEN`.<br>
 * Include the returned token in the `x-csrf-token` header of all write (POST, PUT, PATCH, DELETE) requests.<br>
 * This protects against Cross-Site Request Forgery attacks by validating state-changing requests.
 *
 */
export const getCsrfToken = <ThrowOnError extends boolean = false>(
  options?: Options<GetCsrfTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCsrfTokenResponses,
    unknown,
    ThrowOnError
  >({
    url: "/csrf/token",
    ...options,
  });
};
