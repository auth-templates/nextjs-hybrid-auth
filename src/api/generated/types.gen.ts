// This file is auto-generated by @hey-api/openapi-ts

export type TwoFaSetupResponse = {
  qrCodeUrl?: string;
  secret?: string;
};

export type Verify2FaCodeRequest = {
  code: string;
};

export type Recover2FaRequest = {
  email: string;
};

export type ConfirmRecover2FaRequest = {
  token: string;
};

export type SignupRequest = {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
};

export type LoginRequest = {
  email: string;
  password: string;
};

export type VerifyTokenRequest = {
  token: string;
};

export type ResetPasswordRequest = {
  userEmail: string;
};

export type ConfirmResetPasswordRequest = {
  token: string;
  newPassword: string;
};

export type ErrorResponse = {
  message?: string;
  error?: string;
};

export type ValidationErrorItem = {
  message?: string;
};

export type User = {
  id?: number;
  firstName?: string;
  lastName?: string;
  email?: string;
  role?: string;
  createdAt?: Date;
  enabled2FA?: boolean | null;
  status?: string | null;
};

export type CsrfTokenResponse = {
  csrfToken?: string;
};

export type Post2FaSetupData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/2fa/setup";
};

export type Post2FaSetupErrors = {
  /**
   * Unauthorized - missing or invalid token
   */
  401: unknown;
};

export type Post2FaSetupResponses = {
  /**
   * 2FA setup information returned successfully
   */
  200: TwoFaSetupResponse;
};

export type Post2FaSetupResponse =
  Post2FaSetupResponses[keyof Post2FaSetupResponses];

export type Post2FaVerifySetupData = {
  body: Verify2FaCodeRequest;
  path?: never;
  query?: never;
  url: "/2fa/verify-setup";
};

export type Post2FaVerifySetupErrors = {
  /**
   * Invalid code
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
};

export type Post2FaVerifySetupResponses = {
  /**
   * Verification successful, 2FA enabled
   */
  200: unknown;
};

export type Delete2FaDisableData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/2fa/disable";
};

export type Delete2FaDisableErrors = {
  /**
   * Invalid request
   */
  400: unknown;
  /**
   * Unauthorized - missing or invalid token
   */
  401: unknown;
};

export type Delete2FaDisableResponses = {
  /**
   * 2FA disabled successfully
   */
  200: unknown;
};

export type Post2FaRecoverData = {
  body: Recover2FaRequest;
  path?: never;
  query?: never;
  url: "/2fa/recover";
};

export type Post2FaRecoverErrors = {
  /**
   * Invalid email or failed request
   */
  400: unknown;
  /**
   * User not found
   */
  404: unknown;
};

export type Post2FaRecoverResponses = {
  /**
   * 2FA reset request sent successfully
   */
  200: unknown;
};

export type Post2FaConfirmRecoverData = {
  body: ConfirmRecover2FaRequest;
  path?: never;
  query?: never;
  url: "/2fa/confirm-recover";
};

export type Post2FaConfirmRecoverErrors = {
  /**
   * Invalid token
   */
  400: unknown;
  /**
   * Unauthorized - missing or invalid token
   */
  401: unknown;
};

export type Post2FaConfirmRecoverResponses = {
  /**
   * 2FA successfully disabled and reset
   */
  200: unknown;
};

export type PostAuthSignupData = {
  body: SignupRequest;
  path?: never;
  query?: never;
  url: "/auth/signup";
};

export type PostAuthSignupErrors = {
  /**
   * Server error during signup.
   */
  500: ErrorResponse;
};

export type PostAuthSignupError =
  PostAuthSignupErrors[keyof PostAuthSignupErrors];

export type PostAuthSignupResponses = {
  /**
   * User successfully registered.
   */
  200: unknown;
};

export type PostAuthVerifySignupData = {
  body: VerifyTokenRequest;
  path?: never;
  query?: never;
  url: "/auth/verify-signup";
};

export type PostAuthVerifySignupErrors = {
  /**
   * Invalid or expired token.
   */
  400: unknown;
  /**
   * User not found.
   */
  404: unknown;
  /**
   * Server error during verification.
   */
  500: unknown;
};

export type PostAuthVerifySignupResponses = {
  /**
   * Token verified and user activated.
   */
  200: unknown;
};

export type PostAuthLoginData = {
  body: LoginRequest;
  path?: never;
  query?: never;
  url: "/auth/login";
};

export type PostAuthLoginErrors = {
  /**
   * Validation errors in login data.
   */
  400: Array<ValidationErrorItem>;
  /**
   * Server error during login.
   */
  500: ErrorResponse;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
  /**
   * Login successful, session token set in cookie and user info returned.
   */
  200: User;
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/logout";
};

export type PostAuthLogoutErrors = {
  /**
   * Server error during logout.
   */
  500: ErrorResponse;
};

export type PostAuthLogoutError =
  PostAuthLogoutErrors[keyof PostAuthLogoutErrors];

export type PostAuthLogoutResponses = {
  /**
   * Logout successful, session cookie deleted.
   */
  204: void;
};

export type PostAuthLogoutResponse =
  PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type PostAuthRefreshData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/refresh";
};

export type PostAuthRefreshErrors = {
  /**
   * Invalid or missing refresh token.
   */
  403: ErrorResponse;
  /**
   * Server error during token refresh.
   */
  500: ErrorResponse;
};

export type PostAuthRefreshError =
  PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
  /**
   * Access token refreshed successfully. No content returned.
   */
  204: void;
};

export type PostAuthRefreshResponse =
  PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthResetPasswordRequestData = {
  body: ResetPasswordRequest;
  path?: never;
  query?: never;
  url: "/auth/reset-password/request";
};

export type PostAuthResetPasswordRequestErrors = {
  /**
   * Server error during password reset.
   */
  500: ErrorResponse;
};

export type PostAuthResetPasswordRequestError =
  PostAuthResetPasswordRequestErrors[keyof PostAuthResetPasswordRequestErrors];

export type PostAuthResetPasswordRequestResponses = {
  /**
   * Password reset not allowed (e.g., user inactive).
   */
  200: {
    message?: string;
  };
  /**
   * Password reset email sent if user exists and is active.
   */
  204: void;
};

export type PostAuthResetPasswordRequestResponse =
  PostAuthResetPasswordRequestResponses[keyof PostAuthResetPasswordRequestResponses];

export type PostAuthResetPasswordData = {
  body: ConfirmResetPasswordRequest;
  path?: never;
  query?: never;
  url: "/auth/reset-password";
};

export type PostAuthResetPasswordErrors = {
  /**
   * Invalid or expired token, or invalid password format.
   */
  400: ErrorResponse;
  /**
   * Server error during password reset.
   */
  500: ErrorResponse;
};

export type PostAuthResetPasswordError =
  PostAuthResetPasswordErrors[keyof PostAuthResetPasswordErrors];

export type PostAuthResetPasswordResponses = {
  /**
   * Password successfully reset.
   */
  204: void;
};

export type PostAuthResetPasswordResponse =
  PostAuthResetPasswordResponses[keyof PostAuthResetPasswordResponses];

export type GetCsrfTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/csrf-token";
};

export type GetCsrfTokenResponses = {
  /**
   * CSRF token returned successfully.
   */
  200: CsrfTokenResponse;
};

export type GetCsrfTokenResponse =
  GetCsrfTokenResponses[keyof GetCsrfTokenResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:3000" | (string & {});
};
