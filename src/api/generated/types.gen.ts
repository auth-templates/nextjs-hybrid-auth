// This file is auto-generated by @hey-api/openapi-ts

export type Message = {
  text: string;
  severity: "error" | "warning" | "info" | "success";
};

export type ApiMessageResponse = {
  messages: Array<Message>;
};

export type TwoFaSetupResponse = {
  qrCodeUrl?: string;
  secret?: string;
};

export type Verify2FaCodeRequest = {
  code: string;
};

export type Recover2FaRequest = {
  email: string;
};

export type ConfirmRecover2FaRequest = {
  token: string;
};

export type SignupRequest = {
  firstName?: string;
  lastName?: string;
  email: string;
  password: string;
  termsAccepted: boolean;
};

export type LoginRequest = {
  email: string;
  password: string;
};

export type Verify2FaRequest = {
  code: string;
};

export type VerifyTokenRequest = {
  token: string;
};

export type ResetPasswordRequest = {
  userEmail: string;
};

export type ConfirmResetPasswordRequest = {
  token: string;
  newPassword: string;
};

export type User = {
  id?: number;
  firstName?: string;
  lastName?: string;
  email?: string;
  role?: string;
  createdAt?: Date;
  enabled2FA?: boolean | null;
  status?: string | null;
};

export type CsrfTokenResponse = {
  csrfToken?: string;
};

export type Post2FaSetupData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/2fa/setup";
};

export type Post2FaSetupErrors = {
  /**
   * Unauthorized - Missing or invalid authentication token.
   */
  401: ApiMessageResponse;
};

export type Post2FaSetupError = Post2FaSetupErrors[keyof Post2FaSetupErrors];

export type Post2FaSetupResponses = {
  /**
   * 2FA setup initialized with QR code and secret.
   */
  200: TwoFaSetupResponse;
};

export type Post2FaSetupResponse =
  Post2FaSetupResponses[keyof Post2FaSetupResponses];

export type Post2FaVerifySetupData = {
  body: Verify2FaCodeRequest;
  path?: never;
  query?: never;
  url: "/2fa/verify-setup";
};

export type Post2FaVerifySetupErrors = {
  /**
   * Invalid two-factor authentication code.
   */
  400: ApiMessageResponse;
  /**
   * Unauthorized - Missing or invalid authentication token.
   */
  401: ApiMessageResponse;
};

export type Post2FaVerifySetupError =
  Post2FaVerifySetupErrors[keyof Post2FaVerifySetupErrors];

export type Post2FaVerifySetupResponses = {
  /**
   * Two-factor authentication enabled successfully.
   */
  200: ApiMessageResponse;
};

export type Post2FaVerifySetupResponse =
  Post2FaVerifySetupResponses[keyof Post2FaVerifySetupResponses];

export type Delete2FaDisableData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/2fa/disable";
};

export type Delete2FaDisableErrors = {
  /**
   * Failed to disable two-factor authentication.
   */
  400: ApiMessageResponse;
  /**
   * Unauthorized - Missing or invalid authentication token.
   */
  401: ApiMessageResponse;
};

export type Delete2FaDisableError =
  Delete2FaDisableErrors[keyof Delete2FaDisableErrors];

export type Delete2FaDisableResponses = {
  /**
   * Two-factor authentication disabled successfully.
   */
  200: ApiMessageResponse;
};

export type Delete2FaDisableResponse =
  Delete2FaDisableResponses[keyof Delete2FaDisableResponses];

export type Post2FaRecoverData = {
  body: Recover2FaRequest;
  path?: never;
  query?: never;
  url: "/2fa/recover";
};

export type Post2FaRecoverErrors = {
  /**
   * Invalid email or request.
   */
  400: ApiMessageResponse;
  /**
   * User not found.
   */
  404: ApiMessageResponse;
};

export type Post2FaRecoverError =
  Post2FaRecoverErrors[keyof Post2FaRecoverErrors];

export type Post2FaRecoverResponses = {
  /**
   * Recovery email sent successfully.
   */
  200: ApiMessageResponse;
};

export type Post2FaRecoverResponse =
  Post2FaRecoverResponses[keyof Post2FaRecoverResponses];

export type Post2FaConfirmRecoverData = {
  body: ConfirmRecover2FaRequest;
  path?: never;
  query?: never;
  url: "/2fa/confirm-recover";
};

export type Post2FaConfirmRecoverErrors = {
  /**
   * Invalid or expired recovery token.
   */
  400: ApiMessageResponse;
  /**
   * Unauthorized - Missing or invalid authentication token.
   */
  401: ApiMessageResponse;
};

export type Post2FaConfirmRecoverError =
  Post2FaConfirmRecoverErrors[keyof Post2FaConfirmRecoverErrors];

export type Post2FaConfirmRecoverResponses = {
  /**
   * Two-factor authentication recovery confirmed.
   */
  200: ApiMessageResponse;
};

export type Post2FaConfirmRecoverResponse =
  Post2FaConfirmRecoverResponses[keyof Post2FaConfirmRecoverResponses];

export type PostAuthSignupData = {
  body: SignupRequest;
  path?: never;
  query?: never;
  url: "/auth/signup";
};

export type PostAuthSignupErrors = {
  /**
   * Server error during signup.
   */
  500: ApiMessageResponse;
};

export type PostAuthSignupError =
  PostAuthSignupErrors[keyof PostAuthSignupErrors];

export type PostAuthSignupResponses = {
  /**
   * User successfully registered.
   */
  200: ApiMessageResponse;
};

export type PostAuthSignupResponse =
  PostAuthSignupResponses[keyof PostAuthSignupResponses];

export type PostAuthVerifySignupData = {
  body: VerifyTokenRequest;
  path?: never;
  query?: never;
  url: "/auth/verify-signup";
};

export type PostAuthVerifySignupErrors = {
  /**
   * Invalid or expired token.
   */
  400: ApiMessageResponse;
  /**
   * User not found.
   */
  404: ApiMessageResponse;
  /**
   * Server error during verification.
   */
  500: ApiMessageResponse;
};

export type PostAuthVerifySignupError =
  PostAuthVerifySignupErrors[keyof PostAuthVerifySignupErrors];

export type PostAuthVerifySignupResponses = {
  /**
   * Token verified and user activated.
   */
  200: ApiMessageResponse;
};

export type PostAuthVerifySignupResponse =
  PostAuthVerifySignupResponses[keyof PostAuthVerifySignupResponses];

export type PostAuthLoginData = {
  body: LoginRequest;
  path?: never;
  query?: never;
  url: "/auth/login";
};

export type PostAuthLoginErrors = {
  /**
   * Validation errors in login data.
   */
  400: ApiMessageResponse;
  /**
   * Incorrect email or password.
   */
  401: ApiMessageResponse;
  /**
   * Server error during login.
   */
  500: ApiMessageResponse;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
  /**
   * Login successful, session token set in cookie and user info returned.
   */
  200: User;
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthLogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/logout";
};

export type PostAuthLogoutErrors = {
  /**
   * Server error during logout.
   */
  500: ApiMessageResponse;
};

export type PostAuthLogoutError =
  PostAuthLogoutErrors[keyof PostAuthLogoutErrors];

export type PostAuthLogoutResponses = {
  /**
   * Logout successful, session cookie deleted.
   */
  204: void;
};

export type PostAuthLogoutResponse =
  PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type PostAuthRefreshData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/refresh";
};

export type PostAuthRefreshErrors = {
  /**
   * Invalid or missing refresh token.
   */
  403: ApiMessageResponse;
  /**
   * Server error during token refresh.
   */
  500: ApiMessageResponse;
};

export type PostAuthRefreshError =
  PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
  /**
   * Access token refreshed successfully. No content returned.
   */
  204: void;
};

export type PostAuthRefreshResponse =
  PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthResetPasswordRequestData = {
  body: ResetPasswordRequest;
  path?: never;
  query?: never;
  url: "/auth/reset-password/request";
};

export type PostAuthResetPasswordRequestErrors = {
  /**
   * Server error during password reset.
   */
  500: ApiMessageResponse;
};

export type PostAuthResetPasswordRequestError =
  PostAuthResetPasswordRequestErrors[keyof PostAuthResetPasswordRequestErrors];

export type PostAuthResetPasswordRequestResponses = {
  /**
   * Password reset not allowed (e.g., user inactive).
   */
  200: ApiMessageResponse;
  /**
   * Password reset email sent if user exists and is active.
   */
  204: void;
};

export type PostAuthResetPasswordRequestResponse =
  PostAuthResetPasswordRequestResponses[keyof PostAuthResetPasswordRequestResponses];

export type PostAuthResetPasswordData = {
  body: ConfirmResetPasswordRequest;
  path?: never;
  query?: never;
  url: "/auth/reset-password";
};

export type PostAuthResetPasswordErrors = {
  /**
   * Invalid or expired token, or invalid password format.
   */
  400: ApiMessageResponse;
  /**
   * Server error during password reset.
   */
  500: ApiMessageResponse;
};

export type PostAuthResetPasswordError =
  PostAuthResetPasswordErrors[keyof PostAuthResetPasswordErrors];

export type PostAuthResetPasswordResponses = {
  /**
   * Password successfully reset.
   */
  204: void;
};

export type PostAuthResetPasswordResponse =
  PostAuthResetPasswordResponses[keyof PostAuthResetPasswordResponses];

export type PostAuthAcceptTermsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/accept-terms";
};

export type PostAuthAcceptTermsErrors = {
  /**
   * Unauthorized - session missing or expired.
   */
  401: ApiMessageResponse;
  /**
   * Invalid or missing refresh token.
   */
  403: ApiMessageResponse;
  /**
   * Server error during terms acceptance or token generation.
   */
  500: ApiMessageResponse;
};

export type PostAuthAcceptTermsError =
  PostAuthAcceptTermsErrors[keyof PostAuthAcceptTermsErrors];

export type PostAuthAcceptTermsResponses = {
  /**
   * Terms accepted successfully. New access token set in cookie.
   */
  204: void;
};

export type PostAuthAcceptTermsResponse =
  PostAuthAcceptTermsResponses[keyof PostAuthAcceptTermsResponses];

export type PostAuthVerify2FaData = {
  body: Verify2FaRequest;
  path?: never;
  query?: never;
  url: "/auth/verify-2fa";
};

export type PostAuthVerify2FaErrors = {
  /**
   * Invalid or expired 2FA code.
   */
  400: ApiMessageResponse;
  /**
   * Unauthorized - session missing or expired.
   */
  401: ApiMessageResponse;
  /**
   * Server error during 2FA verification.
   */
  500: ApiMessageResponse;
};

export type PostAuthVerify2FaError =
  PostAuthVerify2FaErrors[keyof PostAuthVerify2FaErrors];

export type PostAuthVerify2FaResponses = {
  /**
   * 2FA verification successful. Session updated and access token issued.
   */
  200: User;
};

export type PostAuthVerify2FaResponse =
  PostAuthVerify2FaResponses[keyof PostAuthVerify2FaResponses];

export type GetAuthSessionData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/session";
};

export type GetAuthSessionErrors = {
  /**
   * Unauthorized - session missing or expired.
   */
  401: ApiMessageResponse;
  /**
   * Server error retrieving session.
   */
  500: ApiMessageResponse;
};

export type GetAuthSessionError =
  GetAuthSessionErrors[keyof GetAuthSessionErrors];

export type GetAuthSessionResponses = {
  /**
   * Current user session retrieved successfully.
   */
  200: {
    user?: User;
  };
};

export type GetAuthSessionResponse =
  GetAuthSessionResponses[keyof GetAuthSessionResponses];

export type GetCsrfTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/csrf/token";
};

export type GetCsrfTokenResponses = {
  /**
   * CSRF token returned successfully.
   */
  200: CsrfTokenResponse;
};

export type GetCsrfTokenResponse =
  GetCsrfTokenResponses[keyof GetCsrfTokenResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:3000" | (string & {});
};
