// This file is auto-generated by @hey-api/openapi-ts

export type TwoFaSetupResponse = {
    qrCodeUrl?: string;
    secret?: string;
};

export type Verify2FaCodeRequest = {
    code: string;
};

export type Recover2FaRequest = {
    email: string;
};

export type ConfirmRecover2FaRequest = {
    token: string;
};

export type SignupRequest = {
    firstName?: string;
    lastName?: string;
    email: string;
    password: string;
    termsAccepted: boolean;
};

export type VerifyTokenRequest = {
    token: string;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type User = {
    id?: number;
    firstName?: string;
    lastName?: string;
    email?: string;
    role?: string;
    createdAt?: Date;
    enabled2FA?: boolean | null;
    status?: string | null;
};

export type ResendActivationEmailRequest = {
    userEmail: string;
};

export type ResetPasswordRequest = {
    userEmail: string;
};

export type ConfirmResetPasswordRequest = {
    token: string;
    newPassword: string;
};

export type Verify2FaRequest = {
    code: string;
};

export type CsrfTokenResponse = {
    csrfToken?: string;
};

export type Message = {
    text: string;
    severity: 'error' | 'warning' | 'info' | 'success';
};

export type ApiMessageResponse = {
    code?: StatusCode;
    messages: Array<Message>;
};

/**
 * Application-level status codes used to represent the outcome of various operations, including errors, success signals, and conditions requiring user interaction. These codes are designed for programmatic handling by frontend or client logic.
 *
 */
export type StatusCode = 'ACCESS_TOKEN_MISSING' | 'ACCESS_TOKEN_EXPIRED' | 'ACCESS_TOKEN_INVALID' | 'REFRESH_TOKEN_INVALID' | 'SOCIAL_LOGIN_REQUIRED' | 'SIGNUP_TOKEN_INVALID' | 'SIGNUP_TOKEN_EXPIRED' | 'SIGNUP_TOKEN_ALREADY_USED' | 'USER_NOT_FOUND' | 'EMAIL_ALREADY_IN_USE' | 'VERIFICATION_FAILED' | 'EMAIL_VERIFICATION_SEND_FAILED' | 'EMAIL_PASSWORD_RESET_SEND_FAILED' | 'PASSWORD_RESET_FAILED' | 'INVALID_CREDENTIALS' | 'SESSION_INVALID_OR_EXPIRED' | 'TERMS_ACCEPTANCE_REQUIRED' | 'TWO_FA_RECOVERY_TOKEN_INVALID' | 'TWO_FA_RECOVERY_TOKEN_EXPIRED' | 'TWO_FA_RECOVERY_TOKEN_ALREADY_USED' | 'TWO_FA_SETUP_SUCCESS' | 'TWO_FA_VERIFICATION_NOT_PENDING' | 'TWO_FA_VERIFICATION_FAILED' | 'TWO_FA_RECOVERY_NOT_INITIATED' | 'TWO_FA_VERIFICATION_REQUIRED' | 'TWO_FA_NOT_CONFIGURED' | 'TWO_FA_VERIFICATION_CODE_INVALID' | 'TWO_FA_SETUP_INVALID' | 'EMAIL_TWO_FA_RECOVERY_SEND_FAILED' | 'TWO_FA_RECOVERY_FAILED' | 'PASSWORD_RESET_NOT_INITIATED' | 'PASSWORD_RESET_TOKEN_INVALID' | 'PASSWORD_RESET_TOKEN_EXPIRED' | 'PASSWORD_RESET_TOKEN_ALREADY_USED' | 'CSRF_TOKEN_INVALID' | 'INTERNAL_SERVER_ERROR' | 'TERMS_ALREADY_ACCEPTED' | 'CONFIRMATION_EMAIL_SENT_IF_NEEDED';

/**
 * Application-level status codes used to represent the outcome of various operations, including errors, success signals, and conditions requiring user interaction. These codes are designed for programmatic handling by frontend or client logic.
 *
 */
export const StatusCode = {
    ACCESS_TOKEN_MISSING: 'ACCESS_TOKEN_MISSING',
    ACCESS_TOKEN_EXPIRED: 'ACCESS_TOKEN_EXPIRED',
    ACCESS_TOKEN_INVALID: 'ACCESS_TOKEN_INVALID',
    REFRESH_TOKEN_INVALID: 'REFRESH_TOKEN_INVALID',
    SOCIAL_LOGIN_REQUIRED: 'SOCIAL_LOGIN_REQUIRED',
    SIGNUP_TOKEN_INVALID: 'SIGNUP_TOKEN_INVALID',
    SIGNUP_TOKEN_EXPIRED: 'SIGNUP_TOKEN_EXPIRED',
    SIGNUP_TOKEN_ALREADY_USED: 'SIGNUP_TOKEN_ALREADY_USED',
    USER_NOT_FOUND: 'USER_NOT_FOUND',
    EMAIL_ALREADY_IN_USE: 'EMAIL_ALREADY_IN_USE',
    VERIFICATION_FAILED: 'VERIFICATION_FAILED',
    EMAIL_VERIFICATION_SEND_FAILED: 'EMAIL_VERIFICATION_SEND_FAILED',
    EMAIL_PASSWORD_RESET_SEND_FAILED: 'EMAIL_PASSWORD_RESET_SEND_FAILED',
    PASSWORD_RESET_FAILED: 'PASSWORD_RESET_FAILED',
    INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',
    SESSION_INVALID_OR_EXPIRED: 'SESSION_INVALID_OR_EXPIRED',
    TERMS_ACCEPTANCE_REQUIRED: 'TERMS_ACCEPTANCE_REQUIRED',
    TWO_FA_RECOVERY_TOKEN_INVALID: 'TWO_FA_RECOVERY_TOKEN_INVALID',
    TWO_FA_RECOVERY_TOKEN_EXPIRED: 'TWO_FA_RECOVERY_TOKEN_EXPIRED',
    TWO_FA_RECOVERY_TOKEN_ALREADY_USED: 'TWO_FA_RECOVERY_TOKEN_ALREADY_USED',
    TWO_FA_SETUP_SUCCESS: 'TWO_FA_SETUP_SUCCESS',
    TWO_FA_VERIFICATION_NOT_PENDING: 'TWO_FA_VERIFICATION_NOT_PENDING',
    TWO_FA_VERIFICATION_FAILED: 'TWO_FA_VERIFICATION_FAILED',
    TWO_FA_RECOVERY_NOT_INITIATED: 'TWO_FA_RECOVERY_NOT_INITIATED',
    TWO_FA_VERIFICATION_REQUIRED: 'TWO_FA_VERIFICATION_REQUIRED',
    TWO_FA_NOT_CONFIGURED: 'TWO_FA_NOT_CONFIGURED',
    TWO_FA_VERIFICATION_CODE_INVALID: 'TWO_FA_VERIFICATION_CODE_INVALID',
    TWO_FA_SETUP_INVALID: 'TWO_FA_SETUP_INVALID',
    EMAIL_TWO_FA_RECOVERY_SEND_FAILED: 'EMAIL_TWO_FA_RECOVERY_SEND_FAILED',
    TWO_FA_RECOVERY_FAILED: 'TWO_FA_RECOVERY_FAILED',
    PASSWORD_RESET_NOT_INITIATED: 'PASSWORD_RESET_NOT_INITIATED',
    PASSWORD_RESET_TOKEN_INVALID: 'PASSWORD_RESET_TOKEN_INVALID',
    PASSWORD_RESET_TOKEN_EXPIRED: 'PASSWORD_RESET_TOKEN_EXPIRED',
    PASSWORD_RESET_TOKEN_ALREADY_USED: 'PASSWORD_RESET_TOKEN_ALREADY_USED',
    CSRF_TOKEN_INVALID: 'CSRF_TOKEN_INVALID',
    INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
    TERMS_ALREADY_ACCEPTED: 'TERMS_ALREADY_ACCEPTED',
    CONFIRMATION_EMAIL_SENT_IF_NEEDED: 'CONFIRMATION_EMAIL_SENT_IF_NEEDED'
} as const;

/**
 * CSRF token required for POST requests
 */
export type XcsrfTokenHeader = string;

export type Post2FaSetupData = {
    body?: never;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/2fa/setup';
};

export type Post2FaSetupErrors = {
    /**
     * Authentication errors
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type Post2FaSetupError = Post2FaSetupErrors[keyof Post2FaSetupErrors];

export type Post2FaSetupResponses = {
    /**
     * 2FA setup initialized with QR code and secret.
     */
    200: TwoFaSetupResponse;
};

export type Post2FaSetupResponse = Post2FaSetupResponses[keyof Post2FaSetupResponses];

export type Post2FaVerifySetupData = {
    body: Verify2FaCodeRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/2fa/verify-setup';
};

export type Post2FaVerifySetupErrors = {
    /**
     * Invalid two-factor authentication code.
     */
    400: ApiMessageResponse;
    /**
     * Authentication errors
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type Post2FaVerifySetupError = Post2FaVerifySetupErrors[keyof Post2FaVerifySetupErrors];

export type Post2FaVerifySetupResponses = {
    /**
     * Two-factor authentication enabled successfully.
     */
    200: ApiMessageResponse;
};

export type Post2FaVerifySetupResponse = Post2FaVerifySetupResponses[keyof Post2FaVerifySetupResponses];

export type Delete2FaDisableData = {
    body?: never;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/2fa/disable';
};

export type Delete2FaDisableErrors = {
    /**
     * Authentication errors
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type Delete2FaDisableError = Delete2FaDisableErrors[keyof Delete2FaDisableErrors];

export type Delete2FaDisableResponses = {
    /**
     * Two-factor authentication disabled successfully.
     */
    204: void;
};

export type Delete2FaDisableResponse = Delete2FaDisableResponses[keyof Delete2FaDisableResponses];

export type Post2FaRecoverData = {
    body: Recover2FaRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/2fa/recover';
};

export type Post2FaRecoverErrors = {
    /**
     * Bad request (e.g. invalid email format)
     */
    400: ApiMessageResponse;
    /**
     * When user is not found in database
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type Post2FaRecoverError = Post2FaRecoverErrors[keyof Post2FaRecoverErrors];

export type Post2FaRecoverResponses = {
    /**
     * Two Factor Recovery email was sent or not depending on the user's state.
     */
    200: ApiMessageResponse;
    /**
     * Recovery email sent successfully.
     */
    204: void;
};

export type Post2FaRecoverResponse = Post2FaRecoverResponses[keyof Post2FaRecoverResponses];

export type Post2FaConfirmRecoverData = {
    body: ConfirmRecover2FaRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/2fa/confirm-recover';
};

export type Post2FaConfirmRecoverErrors = {
    /**
     * One or more fields contain invalid input values.
     */
    400: ApiMessageResponse;
    /**
     * When user is not found in database
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type Post2FaConfirmRecoverError = Post2FaConfirmRecoverErrors[keyof Post2FaConfirmRecoverErrors];

export type Post2FaConfirmRecoverResponses = {
    /**
     * Two-factor authentication recovery confirmed.
     */
    204: void;
};

export type Post2FaConfirmRecoverResponse = Post2FaConfirmRecoverResponses[keyof Post2FaConfirmRecoverResponses];

export type PostAuthSignupData = {
    body: SignupRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/signup';
};

export type PostAuthSignupErrors = {
    /**
     * One or more fields contain invalid input values.
     */
    400: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthSignupError = PostAuthSignupErrors[keyof PostAuthSignupErrors];

export type PostAuthSignupResponses = {
    /**
     * User successfully registered.
     */
    204: void;
};

export type PostAuthSignupResponse = PostAuthSignupResponses[keyof PostAuthSignupResponses];

export type PostAuthVerifySignupData = {
    body: VerifyTokenRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/verify-signup';
};

export type PostAuthVerifySignupErrors = {
    /**
     * One or more fields contain invalid input values.
     */
    400: ApiMessageResponse;
    /**
     * When user is not found in the database
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthVerifySignupError = PostAuthVerifySignupErrors[keyof PostAuthVerifySignupErrors];

export type PostAuthVerifySignupResponses = {
    /**
     * Token verified and user activated.
     */
    204: void;
};

export type PostAuthVerifySignupResponse = PostAuthVerifySignupResponses[keyof PostAuthVerifySignupResponses];

export type PostAuthLoginData = {
    body: LoginRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type PostAuthLoginErrors = {
    /**
     * Validation errors in login data.
     */
    400: ApiMessageResponse;
    /**
     * Incorrect email or password.
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
    /**
     * Login successful, session token set in cookie and user info returned.
     */
    200: User;
};

export type PostAuthLoginResponse = PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PostAuthResendActivationEmailData = {
    body: ResendActivationEmailRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/resend-activation-email';
};

export type PostAuthResendActivationEmailErrors = {
    /**
     * Bad request (e.g. invalid email format)
     */
    400: ApiMessageResponse;
    /**
     * When user is not found in database
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthResendActivationEmailError = PostAuthResendActivationEmailErrors[keyof PostAuthResendActivationEmailErrors];

export type PostAuthResendActivationEmailResponses = {
    /**
     * Confirmation email was resent (or not needed).
     */
    200: ApiMessageResponse;
};

export type PostAuthResendActivationEmailResponse = PostAuthResendActivationEmailResponses[keyof PostAuthResendActivationEmailResponses];

export type PostAuthLogoutData = {
    body?: never;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type PostAuthLogoutErrors = {
    /**
     * Authentication errors
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthLogoutError = PostAuthLogoutErrors[keyof PostAuthLogoutErrors];

export type PostAuthLogoutResponses = {
    /**
     * Logout successful, session cookie deleted.
     */
    204: void;
};

export type PostAuthLogoutResponse = PostAuthLogoutResponses[keyof PostAuthLogoutResponses];

export type PostAuthRefreshData = {
    body?: never;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type PostAuthRefreshErrors = {
    /**
     * Authentication error
     */
    401: ApiMessageResponse;
    /**
     * Invalid or missing refresh token.
     */
    403: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthRefreshError = PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
    /**
     * Access token refreshed successfully. No content returned.
     */
    204: void;
};

export type PostAuthRefreshResponse = PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthResetPasswordRequestData = {
    body: ResetPasswordRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/reset-password/request';
};

export type PostAuthResetPasswordRequestErrors = {
    /**
     * Bad request (e.g. invalid email format)
     */
    400: ApiMessageResponse;
    /**
     * When user is not found in database
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthResetPasswordRequestError = PostAuthResetPasswordRequestErrors[keyof PostAuthResetPasswordRequestErrors];

export type PostAuthResetPasswordRequestResponses = {
    /**
     * Password reset not allowed (e.g., user inactive).
     */
    200: ApiMessageResponse;
    /**
     * Password reset email sent if user exists and is active.
     */
    204: void;
};

export type PostAuthResetPasswordRequestResponse = PostAuthResetPasswordRequestResponses[keyof PostAuthResetPasswordRequestResponses];

export type PostAuthResetPasswordData = {
    body: ConfirmResetPasswordRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type PostAuthResetPasswordErrors = {
    /**
     * One or more fields contain invalid input values.
     */
    400: ApiMessageResponse;
    /**
     * When user is not found in the database
     */
    401: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthResetPasswordError = PostAuthResetPasswordErrors[keyof PostAuthResetPasswordErrors];

export type PostAuthResetPasswordResponses = {
    /**
     * Password reset not allowed (e.g., user inactive).
     */
    200: ApiMessageResponse;
    /**
     * Password successfully reset.
     */
    204: void;
};

export type PostAuthResetPasswordResponse = PostAuthResetPasswordResponses[keyof PostAuthResetPasswordResponses];

export type PostAuthAcceptTermsData = {
    body?: never;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/accept-terms';
};

export type PostAuthAcceptTermsErrors = {
    /**
     * Authentication errors
     */
    401: ApiMessageResponse;
    /**
     * Authorization errors.
     */
    403: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthAcceptTermsError = PostAuthAcceptTermsErrors[keyof PostAuthAcceptTermsErrors];

export type PostAuthAcceptTermsResponses = {
    /**
     * Terms accepted successfully. New access token set in cookie.
     */
    204: void;
};

export type PostAuthAcceptTermsResponse = PostAuthAcceptTermsResponses[keyof PostAuthAcceptTermsResponses];

export type PostAuthVerify2FaData = {
    body: Verify2FaRequest;
    headers: {
        /**
         * CSRF token required for POST requests
         */
        'x-csrf-token': string;
    };
    path?: never;
    query?: never;
    url: '/auth/verify-2fa';
};

export type PostAuthVerify2FaErrors = {
    /**
     * Invalid or expired 2FA code.
     */
    400: ApiMessageResponse;
    /**
     * UnauthorizedErrors errors
     */
    401: ApiMessageResponse;
    /**
     * Authorization errors.
     */
    403: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type PostAuthVerify2FaError = PostAuthVerify2FaErrors[keyof PostAuthVerify2FaErrors];

export type PostAuthVerify2FaResponses = {
    /**
     * 2FA verification successful. Session updated and access token issued.
     */
    200: User;
};

export type PostAuthVerify2FaResponse = PostAuthVerify2FaResponses[keyof PostAuthVerify2FaResponses];

export type GetAuthSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/session';
};

export type GetAuthSessionErrors = {
    /**
     * Authentication errors
     */
    401: ApiMessageResponse;
    /**
     * User not found
     */
    404: ApiMessageResponse;
    /**
     * Internal server error
     */
    500: ApiMessageResponse;
};

export type GetAuthSessionError = GetAuthSessionErrors[keyof GetAuthSessionErrors];

export type GetAuthSessionResponses = {
    /**
     * Current user session retrieved successfully.
     */
    200: {
        user?: User;
    };
};

export type GetAuthSessionResponse = GetAuthSessionResponses[keyof GetAuthSessionResponses];

export type GetCsrfTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/csrf/token';
};

export type GetCsrfTokenResponses = {
    /**
     * CSRF token returned successfully.
     */
    200: CsrfTokenResponse;
};

export type GetCsrfTokenResponse = GetCsrfTokenResponses[keyof GetCsrfTokenResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3001' | (string & {});
};