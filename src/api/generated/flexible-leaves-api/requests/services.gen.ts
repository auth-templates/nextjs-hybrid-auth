// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { Post2FaSetupResponse, Post2FaVerifySetupData, Post2FaVerifySetupResponse, Delete2FaDisableResponse, Post2FaRecoverData, Post2FaRecoverResponse, Post2FaConfirmRecoverData, Post2FaConfirmRecoverResponse, PostAuthSignupData, PostAuthSignupResponse, PostAuthVerifySignupData, PostAuthVerifySignupResponse, PostAuthLoginData, PostAuthLoginResponse, PostAuthLogoutResponse, PostAuthRefreshResponse, PostAuthResetPasswordRequestData, PostAuthResetPasswordRequestResponse, PostAuthResetPasswordData, PostAuthResetPasswordResponse } from './types.gen';

export class DefaultService {
    /**
     * Generates QR code and temporary secret for 2FA setup
     * Initiates the 2FA setup process by generating a QR code and a temporary secret for a TOTP app like Google Authenticator.
     * @returns unknown 2FA setup information returned successfully
     * @throws ApiError
     */
    public static post2FaSetup(): CancelablePromise<Post2FaSetupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/2fa/setup',
            errors: {
                401: 'Unauthorized - missing or invalid token'
            }
        });
    }
    
    /**
     * Verifies the 2FA setup code
     * Verifies the TOTP code to confirm 2FA setup with an authenticator app.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Verification successful, 2FA enabled
     * @throws ApiError
     */
    public static post2FaVerifySetup(data: Post2FaVerifySetupData): CancelablePromise<Post2FaVerifySetupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/2fa/verify-setup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid code',
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Disables 2FA
     * Disables two-factor authentication for the current user and deletes the 2FA secret from the database.
     * @returns unknown 2FA disabled successfully
     * @throws ApiError
     */
    public static delete2FaDisable(): CancelablePromise<Delete2FaDisableResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/2fa/disable',
            errors: {
                400: 'Invalid request',
                401: 'Unauthorized - missing or invalid token'
            }
        });
    }
    
    /**
     * Request email-based 2FA reset
     * Requests a recovery process for users who are locked out due to losing access to their 2FA device (phone).
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown 2FA reset request sent successfully
     * @throws ApiError
     */
    public static post2FaRecover(data: Post2FaRecoverData): CancelablePromise<Post2FaRecoverResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/2fa/recover',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid email or failed request',
                404: 'User not found'
            }
        });
    }
    
    /**
     * Confirm 2FA reset
     * Confirms the reset process for 2FA by verifying the token sent to the user's email.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown 2FA successfully disabled and reset
     * @throws ApiError
     */
    public static post2FaConfirmRecover(data: Post2FaConfirmRecoverData): CancelablePromise<Post2FaConfirmRecoverResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/2fa/confirm-recover',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid token',
                401: 'Unauthorized - missing or invalid token'
            }
        });
    }
    
    /**
     * User Signup
     * Registers a new user and saves them to the database with admin role.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown User successfully registered.
     * @throws ApiError
     */
    public static postAuthSignup(data: PostAuthSignupData): CancelablePromise<PostAuthSignupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                500: 'Server error during signup.'
            }
        });
    }
    
    /**
     * Verify Signup Token
     * Verifies a user's signup token and activates their account.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Token verified and user activated.
     * @throws ApiError
     */
    public static postAuthVerifySignup(data: PostAuthVerifySignupData): CancelablePromise<PostAuthVerifySignupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/verify-signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid or expired token.',
                404: 'User not found.',
                500: 'Server error during verification.'
            }
        });
    }
    
    /**
     * User Login
     * Generates a session token for the user and sets it in an HTTP-only cookie.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Login successful, session token set in cookie and user info returned.
     * @throws ApiError
     */
    public static postAuthLogin(data: PostAuthLoginData): CancelablePromise<PostAuthLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Validation errors in login data.',
                500: 'Server error during login.'
            }
        });
    }
    
    /**
     * User Logout
     * Logs out the user by deleting the session cookie.
     * @returns void Logout successful, session cookie deleted.
     * @throws ApiError
     */
    public static postAuthLogout(): CancelablePromise<PostAuthLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/logout',
            errors: {
                500: 'Server error during logout.'
            }
        });
    }
    
    /**
     * Refresh Access Token
     * Refreshes the access token using a valid refresh token stored in cookies. Requires authentication.
     * @returns void Access token refreshed successfully. No content returned.
     * @throws ApiError
     */
    public static postAuthRefresh(): CancelablePromise<PostAuthRefreshResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/refresh',
            errors: {
                403: 'Invalid or missing refresh token.',
                500: 'Server error during token refresh.'
            }
        });
    }
    
    /**
     * Initiate Password Reset
     * Sends a password reset email to the given email address. Always responds with 204 to avoid revealing user existence.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Password reset not allowed (e.g., user inactive). Response used to avoid user enumeration.
     * @returns void Password reset email sent if user exists and is active.
     * @throws ApiError
     */
    public static postAuthResetPasswordRequest(data: PostAuthResetPasswordRequestData): CancelablePromise<PostAuthResetPasswordRequestResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/reset-password/request',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                500: 'Server error during password reset.'
            }
        });
    }
    
    /**
     * Complete Password Reset
     * Resets the user's password using a valid reset token and a new password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns void Password successfully reset.
     * @throws ApiError
     */
    public static postAuthResetPassword(data: PostAuthResetPasswordData): CancelablePromise<PostAuthResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Invalid or expired token, or invalid password format.',
                500: 'Server error during password reset.'
            }
        });
    }
    
}