// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    id?: number;
    firstName?: string;
    lastName?: string;
    email?: string;
    /**
     * Role of the user
     */
    role?: string;
    createdAt?: string;
    enabled2FA?: boolean | null;
    /**
     * Status of the user
     */
    status?: string | null;
};

export type Post2FaSetupResponse = {
    qrCodeUrl?: string;
    secret?: string;
};

export type Post2FaVerifySetupData = {
    requestBody: {
        code: string;
    };
};

export type Post2FaVerifySetupResponse = unknown;

export type Delete2FaDisableResponse = unknown;

export type Post2FaRecoverData = {
    requestBody: {
        email: string;
    };
};

export type Post2FaRecoverResponse = unknown;

export type Post2FaConfirmRecoverData = {
    requestBody: {
        token: string;
    };
};

export type Post2FaConfirmRecoverResponse = unknown;

export type PostAuthSignupData = {
    requestBody: {
        firstName: string;
        lastName: string;
        email: string;
        password: string;
    };
};

export type PostAuthSignupResponse = unknown;

export type PostAuthVerifySignupData = {
    requestBody: {
        token: string;
    };
};

export type PostAuthVerifySignupResponse = unknown;

export type PostAuthLoginData = {
    requestBody: {
        email?: string;
        password?: string;
    };
};

export type PostAuthLoginResponse = User;

export type PostAuthLogoutResponse = void;

export type PostAuthRefreshResponse = void;

export type PostAuthResetPasswordRequestData = {
    requestBody: {
        userEmail: string;
    };
};

export type PostAuthResetPasswordRequestResponse = {
    message?: string;
} | void;

export type PostAuthResetPasswordData = {
    requestBody: {
        token: string;
        newPassword: string;
    };
};

export type PostAuthResetPasswordResponse = void;

export type $OpenApiTs = {
    '/2fa/setup': {
        post: {
            res: {
                /**
                 * 2FA setup information returned successfully
                 */
                200: {
                    qrCodeUrl?: string;
                    secret?: string;
                };
                /**
                 * Unauthorized - missing or invalid token
                 */
                401: unknown;
            };
        };
    };
    '/2fa/verify-setup': {
        post: {
            req: Post2FaVerifySetupData;
            res: {
                /**
                 * Verification successful, 2FA enabled
                 */
                200: unknown;
                /**
                 * Invalid code
                 */
                400: unknown;
                /**
                 * Unauthorized
                 */
                401: unknown;
            };
        };
    };
    '/2fa/disable': {
        delete: {
            res: {
                /**
                 * 2FA disabled successfully
                 */
                200: unknown;
                /**
                 * Invalid request
                 */
                400: unknown;
                /**
                 * Unauthorized - missing or invalid token
                 */
                401: unknown;
            };
        };
    };
    '/2fa/recover': {
        post: {
            req: Post2FaRecoverData;
            res: {
                /**
                 * 2FA reset request sent successfully
                 */
                200: unknown;
                /**
                 * Invalid email or failed request
                 */
                400: unknown;
                /**
                 * User not found
                 */
                404: unknown;
            };
        };
    };
    '/2fa/confirm-recover': {
        post: {
            req: Post2FaConfirmRecoverData;
            res: {
                /**
                 * 2FA successfully disabled and reset
                 */
                200: unknown;
                /**
                 * Invalid token
                 */
                400: unknown;
                /**
                 * Unauthorized - missing or invalid token
                 */
                401: unknown;
            };
        };
    };
    '/auth/signup': {
        post: {
            req: PostAuthSignupData;
            res: {
                /**
                 * User successfully registered.
                 */
                200: unknown;
                /**
                 * Server error during signup.
                 */
                500: {
                    message?: string;
                    error?: string;
                };
            };
        };
    };
    '/auth/verify-signup': {
        post: {
            req: PostAuthVerifySignupData;
            res: {
                /**
                 * Token verified and user activated.
                 */
                200: unknown;
                /**
                 * Invalid or expired token.
                 */
                400: unknown;
                /**
                 * User not found.
                 */
                404: unknown;
                /**
                 * Server error during verification.
                 */
                500: unknown;
            };
        };
    };
    '/auth/login': {
        post: {
            req: PostAuthLoginData;
            res: {
                /**
                 * Login successful, session token set in cookie and user info returned.
                 */
                200: User;
                /**
                 * Validation errors in login data.
                 */
                400: Array<{
                    message?: string;
                }>;
                /**
                 * Server error during login.
                 */
                500: {
                    message?: string;
                    error?: string;
                };
            };
        };
    };
    '/auth/logout': {
        post: {
            res: {
                /**
                 * Logout successful, session cookie deleted.
                 */
                204: void;
                /**
                 * Server error during logout.
                 */
                500: {
                    message?: string;
                    error?: string;
                };
            };
        };
    };
    '/auth/refresh': {
        post: {
            res: {
                /**
                 * Access token refreshed successfully. No content returned.
                 */
                204: void;
                /**
                 * Invalid or missing refresh token.
                 */
                403: {
                    message?: string;
                };
                /**
                 * Server error during token refresh.
                 */
                500: {
                    message?: string;
                };
            };
        };
    };
    '/auth/reset-password/request': {
        post: {
            req: PostAuthResetPasswordRequestData;
            res: {
                /**
                 * Password reset not allowed (e.g., user inactive). Response used to avoid user enumeration.
                 */
                200: {
                    message?: string;
                };
                /**
                 * Password reset email sent if user exists and is active.
                 */
                204: void;
                /**
                 * Server error during password reset.
                 */
                500: {
                    message?: string;
                };
            };
        };
    };
    '/auth/reset-password': {
        post: {
            req: PostAuthResetPasswordData;
            res: {
                /**
                 * Password successfully reset.
                 */
                204: void;
                /**
                 * Invalid or expired token, or invalid password format.
                 */
                400: {
                    message?: string;
                };
                /**
                 * Server error during password reset.
                 */
                500: {
                    message?: string;
                };
            };
        };
    };
};