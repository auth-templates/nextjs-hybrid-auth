// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  post2FaSetup,
  post2FaVerifySetup,
  delete2FaDisable,
  post2FaRecover,
  post2FaConfirmRecover,
  postAuthSignup,
  postAuthVerifySignup,
  postAuthLogin,
  postAuthLogout,
  postAuthRefresh,
  postAuthResetPasswordRequest,
  postAuthResetPassword,
  postAuthAcceptTerms,
  postAuthVerify2Fa,
  getCsrfToken,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  Post2FaSetupData,
  Post2FaSetupError,
  Post2FaSetupResponse,
  Post2FaVerifySetupData,
  Post2FaVerifySetupError,
  Post2FaVerifySetupResponse,
  Delete2FaDisableData,
  Delete2FaDisableError,
  Delete2FaDisableResponse,
  Post2FaRecoverData,
  Post2FaRecoverError,
  Post2FaRecoverResponse,
  Post2FaConfirmRecoverData,
  Post2FaConfirmRecoverError,
  Post2FaConfirmRecoverResponse,
  PostAuthSignupData,
  PostAuthSignupError,
  PostAuthSignupResponse,
  PostAuthVerifySignupData,
  PostAuthVerifySignupError,
  PostAuthVerifySignupResponse,
  PostAuthLoginData,
  PostAuthLoginError,
  PostAuthLoginResponse,
  PostAuthLogoutData,
  PostAuthLogoutError,
  PostAuthLogoutResponse,
  PostAuthRefreshData,
  PostAuthRefreshError,
  PostAuthRefreshResponse,
  PostAuthResetPasswordRequestData,
  PostAuthResetPasswordRequestError,
  PostAuthResetPasswordRequestResponse,
  PostAuthResetPasswordData,
  PostAuthResetPasswordError,
  PostAuthResetPasswordResponse,
  PostAuthAcceptTermsData,
  PostAuthAcceptTermsError,
  PostAuthAcceptTermsResponse,
  PostAuthVerify2FaData,
  PostAuthVerify2FaError,
  PostAuthVerify2FaResponse,
  GetCsrfTokenData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const post2FaSetupQueryKey = (options?: Options<Post2FaSetupData>) =>
  createQueryKey("post2FaSetup", options);

/**
 * Initialize 2FA Setup
 * Generates a QR code and a temporary secret to start the two-factor authentication setup process.
 */
export const post2FaSetupOptions = (options?: Options<Post2FaSetupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await post2FaSetup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: post2FaSetupQueryKey(options),
  });
};

/**
 * Initialize 2FA Setup
 * Generates a QR code and a temporary secret to start the two-factor authentication setup process.
 */
export const post2FaSetupMutation = (
  options?: Partial<Options<Post2FaSetupData>>,
): UseMutationOptions<
  Post2FaSetupResponse,
  Post2FaSetupError,
  Options<Post2FaSetupData>
> => {
  const mutationOptions: UseMutationOptions<
    Post2FaSetupResponse,
    Post2FaSetupError,
    Options<Post2FaSetupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await post2FaSetup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const post2FaVerifySetupQueryKey = (
  options: Options<Post2FaVerifySetupData>,
) => createQueryKey("post2FaVerifySetup", options);

/**
 * Verify 2FA Setup Code
 * Verifies the TOTP code to confirm two-factor authentication setup.
 */
export const post2FaVerifySetupOptions = (
  options: Options<Post2FaVerifySetupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await post2FaVerifySetup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: post2FaVerifySetupQueryKey(options),
  });
};

/**
 * Verify 2FA Setup Code
 * Verifies the TOTP code to confirm two-factor authentication setup.
 */
export const post2FaVerifySetupMutation = (
  options?: Partial<Options<Post2FaVerifySetupData>>,
): UseMutationOptions<
  Post2FaVerifySetupResponse,
  Post2FaVerifySetupError,
  Options<Post2FaVerifySetupData>
> => {
  const mutationOptions: UseMutationOptions<
    Post2FaVerifySetupResponse,
    Post2FaVerifySetupError,
    Options<Post2FaVerifySetupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await post2FaVerifySetup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Disable Two-Factor Authentication
 * Disables 2FA for the current user and removes the 2FA secret.
 */
export const delete2FaDisableMutation = (
  options?: Partial<Options<Delete2FaDisableData>>,
): UseMutationOptions<
  Delete2FaDisableResponse,
  Delete2FaDisableError,
  Options<Delete2FaDisableData>
> => {
  const mutationOptions: UseMutationOptions<
    Delete2FaDisableResponse,
    Delete2FaDisableError,
    Options<Delete2FaDisableData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await delete2FaDisable({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const post2FaRecoverQueryKey = (options: Options<Post2FaRecoverData>) =>
  createQueryKey("post2FaRecover", options);

/**
 * Request 2FA Recovery
 * Sends a recovery email to users who lost access to their 2FA device.
 */
export const post2FaRecoverOptions = (options: Options<Post2FaRecoverData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await post2FaRecover({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: post2FaRecoverQueryKey(options),
  });
};

/**
 * Request 2FA Recovery
 * Sends a recovery email to users who lost access to their 2FA device.
 */
export const post2FaRecoverMutation = (
  options?: Partial<Options<Post2FaRecoverData>>,
): UseMutationOptions<
  Post2FaRecoverResponse,
  Post2FaRecoverError,
  Options<Post2FaRecoverData>
> => {
  const mutationOptions: UseMutationOptions<
    Post2FaRecoverResponse,
    Post2FaRecoverError,
    Options<Post2FaRecoverData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await post2FaRecover({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const post2FaConfirmRecoverQueryKey = (
  options: Options<Post2FaConfirmRecoverData>,
) => createQueryKey("post2FaConfirmRecover", options);

/**
 * Confirm 2FA Recovery
 * Confirms 2FA reset by verifying the recovery token sent via email.
 */
export const post2FaConfirmRecoverOptions = (
  options: Options<Post2FaConfirmRecoverData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await post2FaConfirmRecover({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: post2FaConfirmRecoverQueryKey(options),
  });
};

/**
 * Confirm 2FA Recovery
 * Confirms 2FA reset by verifying the recovery token sent via email.
 */
export const post2FaConfirmRecoverMutation = (
  options?: Partial<Options<Post2FaConfirmRecoverData>>,
): UseMutationOptions<
  Post2FaConfirmRecoverResponse,
  Post2FaConfirmRecoverError,
  Options<Post2FaConfirmRecoverData>
> => {
  const mutationOptions: UseMutationOptions<
    Post2FaConfirmRecoverResponse,
    Post2FaConfirmRecoverError,
    Options<Post2FaConfirmRecoverData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await post2FaConfirmRecover({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthSignupQueryKey = (options: Options<PostAuthSignupData>) =>
  createQueryKey("postAuthSignup", options);

/**
 * User Signup
 * Registers a new user and saves them to the database with admin role.
 */
export const postAuthSignupOptions = (options: Options<PostAuthSignupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthSignup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthSignupQueryKey(options),
  });
};

/**
 * User Signup
 * Registers a new user and saves them to the database with admin role.
 */
export const postAuthSignupMutation = (
  options?: Partial<Options<PostAuthSignupData>>,
): UseMutationOptions<
  PostAuthSignupResponse,
  PostAuthSignupError,
  Options<PostAuthSignupData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthSignupResponse,
    PostAuthSignupError,
    Options<PostAuthSignupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthSignup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthVerifySignupQueryKey = (
  options: Options<PostAuthVerifySignupData>,
) => createQueryKey("postAuthVerifySignup", options);

/**
 * Verify Signup Token
 * Verifies a user's signup token and activates their account.
 */
export const postAuthVerifySignupOptions = (
  options: Options<PostAuthVerifySignupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthVerifySignup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthVerifySignupQueryKey(options),
  });
};

/**
 * Verify Signup Token
 * Verifies a user's signup token and activates their account.
 */
export const postAuthVerifySignupMutation = (
  options?: Partial<Options<PostAuthVerifySignupData>>,
): UseMutationOptions<
  PostAuthVerifySignupResponse,
  PostAuthVerifySignupError,
  Options<PostAuthVerifySignupData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthVerifySignupResponse,
    PostAuthVerifySignupError,
    Options<PostAuthVerifySignupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthVerifySignup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthLoginQueryKey = (options: Options<PostAuthLoginData>) =>
  createQueryKey("postAuthLogin", options);

/**
 * User Login
 * Generates a session token for the user and sets it in an HTTP-only cookie.
 */
export const postAuthLoginOptions = (options: Options<PostAuthLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthLoginQueryKey(options),
  });
};

/**
 * User Login
 * Generates a session token for the user and sets it in an HTTP-only cookie.
 */
export const postAuthLoginMutation = (
  options?: Partial<Options<PostAuthLoginData>>,
): UseMutationOptions<
  PostAuthLoginResponse,
  PostAuthLoginError,
  Options<PostAuthLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthLoginResponse,
    PostAuthLoginError,
    Options<PostAuthLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthLogoutQueryKey = (options?: Options<PostAuthLogoutData>) =>
  createQueryKey("postAuthLogout", options);

/**
 * User Logout
 * Logs out the user by deleting the session cookie.
 */
export const postAuthLogoutOptions = (
  options?: Options<PostAuthLogoutData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthLogoutQueryKey(options),
  });
};

/**
 * User Logout
 * Logs out the user by deleting the session cookie.
 */
export const postAuthLogoutMutation = (
  options?: Partial<Options<PostAuthLogoutData>>,
): UseMutationOptions<
  PostAuthLogoutResponse,
  PostAuthLogoutError,
  Options<PostAuthLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthLogoutResponse,
    PostAuthLogoutError,
    Options<PostAuthLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthRefreshQueryKey = (
  options?: Options<PostAuthRefreshData>,
) => createQueryKey("postAuthRefresh", options);

/**
 * Refresh Access Token
 * Refreshes the access token using a valid refresh token stored in cookies. Requires authentication.
 */
export const postAuthRefreshOptions = (
  options?: Options<PostAuthRefreshData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRefresh({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRefreshQueryKey(options),
  });
};

/**
 * Refresh Access Token
 * Refreshes the access token using a valid refresh token stored in cookies. Requires authentication.
 */
export const postAuthRefreshMutation = (
  options?: Partial<Options<PostAuthRefreshData>>,
): UseMutationOptions<
  PostAuthRefreshResponse,
  PostAuthRefreshError,
  Options<PostAuthRefreshData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRefreshResponse,
    PostAuthRefreshError,
    Options<PostAuthRefreshData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRefresh({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthResetPasswordRequestQueryKey = (
  options: Options<PostAuthResetPasswordRequestData>,
) => createQueryKey("postAuthResetPasswordRequest", options);

/**
 * Initiate Password Reset
 * Sends a password reset email to the given email address. Always responds with 204 to avoid revealing user existence.
 */
export const postAuthResetPasswordRequestOptions = (
  options: Options<PostAuthResetPasswordRequestData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthResetPasswordRequest({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthResetPasswordRequestQueryKey(options),
  });
};

/**
 * Initiate Password Reset
 * Sends a password reset email to the given email address. Always responds with 204 to avoid revealing user existence.
 */
export const postAuthResetPasswordRequestMutation = (
  options?: Partial<Options<PostAuthResetPasswordRequestData>>,
): UseMutationOptions<
  PostAuthResetPasswordRequestResponse,
  PostAuthResetPasswordRequestError,
  Options<PostAuthResetPasswordRequestData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthResetPasswordRequestResponse,
    PostAuthResetPasswordRequestError,
    Options<PostAuthResetPasswordRequestData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthResetPasswordRequest({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthResetPasswordQueryKey = (
  options: Options<PostAuthResetPasswordData>,
) => createQueryKey("postAuthResetPassword", options);

/**
 * Complete Password Reset
 * Resets the user's password using a valid reset token and a new password.
 */
export const postAuthResetPasswordOptions = (
  options: Options<PostAuthResetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthResetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthResetPasswordQueryKey(options),
  });
};

/**
 * Complete Password Reset
 * Resets the user's password using a valid reset token and a new password.
 */
export const postAuthResetPasswordMutation = (
  options?: Partial<Options<PostAuthResetPasswordData>>,
): UseMutationOptions<
  PostAuthResetPasswordResponse,
  PostAuthResetPasswordError,
  Options<PostAuthResetPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthResetPasswordResponse,
    PostAuthResetPasswordError,
    Options<PostAuthResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthResetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthAcceptTermsQueryKey = (
  options?: Options<PostAuthAcceptTermsData>,
) => createQueryKey("postAuthAcceptTerms", options);

/**
 * Accept Terms of Service
 * Marks the user's Terms of Service as accepted. Requires a valid session and refresh token. A new access token is issued with updated claims and sent via an HTTP-only cookie.
 *
 */
export const postAuthAcceptTermsOptions = (
  options?: Options<PostAuthAcceptTermsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthAcceptTerms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthAcceptTermsQueryKey(options),
  });
};

/**
 * Accept Terms of Service
 * Marks the user's Terms of Service as accepted. Requires a valid session and refresh token. A new access token is issued with updated claims and sent via an HTTP-only cookie.
 *
 */
export const postAuthAcceptTermsMutation = (
  options?: Partial<Options<PostAuthAcceptTermsData>>,
): UseMutationOptions<
  PostAuthAcceptTermsResponse,
  PostAuthAcceptTermsError,
  Options<PostAuthAcceptTermsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthAcceptTermsResponse,
    PostAuthAcceptTermsError,
    Options<PostAuthAcceptTermsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthAcceptTerms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthVerify2FaQueryKey = (
  options: Options<PostAuthVerify2FaData>,
) => createQueryKey("postAuthVerify2Fa", options);

/**
 * Verify Two-Factor Authentication Code
 * Verifies a 2FA code provided by the user during login. Requires an active session.
 */
export const postAuthVerify2FaOptions = (
  options: Options<PostAuthVerify2FaData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthVerify2Fa({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthVerify2FaQueryKey(options),
  });
};

/**
 * Verify Two-Factor Authentication Code
 * Verifies a 2FA code provided by the user during login. Requires an active session.
 */
export const postAuthVerify2FaMutation = (
  options?: Partial<Options<PostAuthVerify2FaData>>,
): UseMutationOptions<
  PostAuthVerify2FaResponse,
  PostAuthVerify2FaError,
  Options<PostAuthVerify2FaData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthVerify2FaResponse,
    PostAuthVerify2FaError,
    Options<PostAuthVerify2FaData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthVerify2Fa({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCsrfTokenQueryKey = (options?: Options<GetCsrfTokenData>) =>
  createQueryKey("getCsrfToken", options);

/**
 * Get CSRF token
 * Returns a CSRF token and sets a cookie named `XSRF-TOKEN`.<br>
 * Include the returned token in the `x-csrf-token` header of all write (POST, PUT, PATCH, DELETE) requests.<br>
 * This protects against Cross-Site Request Forgery attacks by validating state-changing requests.
 *
 */
export const getCsrfTokenOptions = (options?: Options<GetCsrfTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCsrfToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCsrfTokenQueryKey(options),
  });
};
