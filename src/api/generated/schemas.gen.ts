// This file is auto-generated by @hey-api/openapi-ts

export const TwoFASetupResponseSchema = {
    type: 'object',
    properties: {
        qrCodeUrl: {
            type: 'string',
            format: 'uri',
            example: 'otpauth://totp/MyApp:username@example.com?secret=ABCDEF123456&issuer=MyApp'
        },
        secret: {
            type: 'string',
            example: 'ABCDEF123456'
        }
    }
} as const;

export const Verify2FACodeRequestSchema = {
    type: 'object',
    required: ['code'],
    properties: {
        code: {
            type: 'string',
            example: '123456'
        }
    }
} as const;

export const Recover2FARequestSchema = {
    type: 'object',
    required: ['email'],
    properties: {
        email: {
            type: 'string',
            example: 'user@example.com'
        }
    }
} as const;

export const ConfirmRecover2FARequestSchema = {
    type: 'object',
    required: ['token'],
    properties: {
        token: {
            type: 'string',
            example: 'abc123def456'
        }
    }
} as const;

export const SignupRequestSchema = {
    type: 'object',
    required: ['email', 'password', 'termsAccepted'],
    properties: {
        firstName: {
            type: 'string',
            example: 'John'
        },
        lastName: {
            type: 'string',
            example: 'Doe'
        },
        email: {
            type: 'string',
            example: 'john.doe@example.com'
        },
        password: {
            type: 'string',
            example: '$SuperSecurePassword123'
        },
        termsAccepted: {
            type: 'boolean',
            example: true
        }
    }
} as const;

export const VerifyTokenRequestSchema = {
    type: 'object',
    required: ['token'],
    properties: {
        token: {
            type: 'string',
            example: 'signup-verification-token-here'
        }
    }
} as const;

export const LoginRequestSchema = {
    type: 'object',
    required: ['email', 'password'],
    properties: {
        email: {
            type: 'string',
            example: 'dev@mail.com'
        },
        password: {
            type: 'string',
            example: '$SuperSecurePassword45'
        }
    }
} as const;

export const UserSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            example: 123
        },
        firstName: {
            type: 'string',
            example: 'John'
        },
        lastName: {
            type: 'string',
            example: 'Doe'
        },
        email: {
            type: 'string',
            format: 'email',
            example: 'john.doe@example.com'
        },
        role: {
            type: 'string',
            example: 'admin'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            example: '2023-01-01T12:00:00Z'
        },
        enabled2FA: {
            type: 'boolean',
            nullable: true,
            example: true
        },
        status: {
            type: 'string',
            nullable: true,
            example: 'active'
        }
    }
} as const;

export const ResendActivationEmailRequestSchema = {
    type: 'object',
    required: ['userEmail'],
    properties: {
        userEmail: {
            type: 'string',
            format: 'email',
            example: 'user@example.com'
        }
    }
} as const;

export const ResetPasswordRequestSchema = {
    type: 'object',
    required: ['userEmail'],
    properties: {
        userEmail: {
            type: 'string',
            example: 'user@example.com'
        }
    }
} as const;

export const ConfirmResetPasswordRequestSchema = {
    type: 'object',
    required: ['token', 'password'],
    properties: {
        token: {
            type: 'string',
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        },
        password: {
            type: 'string',
            example: 'StrongNewPassword!2025'
        }
    }
} as const;

export const Verify2FARequestSchema = {
    type: 'object',
    required: ['code'],
    properties: {
        code: {
            type: 'string',
            example: '123456'
        }
    }
} as const;

export const CsrfTokenResponseSchema = {
    type: 'object',
    properties: {
        csrfToken: {
            type: 'string',
            example: 'abc123csrfTOKEN456xyz'
        }
    }
} as const;

export const MessageSchema = {
    type: 'object',
    required: ['text', 'severity'],
    properties: {
        text: {
            type: 'string',
            example: 'Two-factor authentication enabled successfully.'
        },
        severity: {
            type: 'string',
            enum: ['error', 'warning', 'info', 'success'],
            example: 'success'
        }
    }
} as const;

export const ApiMessageResponseSchema = {
    type: 'object',
    required: ['messages'],
    properties: {
        code: {
            '$ref': '#/components/schemas/StatusCode'
        },
        messages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Message'
            }
        }
    }
} as const;

export const StatusCodeSchema = {
    type: 'string',
    description: `Application-level status codes used to represent the outcome of various operations, including errors, success signals, and conditions requiring user interaction. These codes are designed for programmatic handling by frontend or client logic.
`,
    enum: ['ACCESS_TOKEN_MISSING', 'ACCESS_TOKEN_EXPIRED', 'ACCESS_TOKEN_INVALID', 'REFRESH_TOKEN_INVALID', 'SOCIAL_LOGIN_REQUIRED', 'SIGNUP_TOKEN_INVALID', 'SIGNUP_TOKEN_EXPIRED', 'SIGNUP_TOKEN_ALREADY_USED', 'USER_NOT_FOUND', 'EMAIL_ALREADY_IN_USE', 'VERIFICATION_FAILED', 'EMAIL_VERIFICATION_SEND_FAILED', 'EMAIL_PASSWORD_RESET_SEND_FAILED', 'PASSWORD_RESET_FAILED', 'INVALID_CREDENTIALS', 'SESSION_INVALID_OR_EXPIRED', 'TERMS_ACCEPTANCE_REQUIRED', 'TWO_FA_RECOVERY_TOKEN_INVALID', 'TWO_FA_RECOVERY_TOKEN_EXPIRED', 'TWO_FA_RECOVERY_TOKEN_ALREADY_USED', 'TWO_FA_SETUP_SUCCESS', 'TWO_FA_VERIFICATION_NOT_PENDING', 'TWO_FA_VERIFICATION_FAILED', 'TWO_FA_RECOVERY_NOT_INITIATED', 'TWO_FA_VERIFICATION_REQUIRED', 'TWO_FA_NOT_CONFIGURED', 'TWO_FA_VERIFICATION_CODE_INVALID', 'TWO_FA_SETUP_INVALID', 'EMAIL_TWO_FA_RECOVERY_SEND_FAILED', 'TWO_FA_RECOVERY_FAILED', 'PASSWORD_RESET_NOT_INITIATED', 'PASSWORD_RESET_TOKEN_INVALID', 'PASSWORD_RESET_TOKEN_EXPIRED', 'PASSWORD_RESET_TOKEN_ALREADY_USED', 'CSRF_TOKEN_INVALID', 'INTERNAL_SERVER_ERROR', 'TERMS_ALREADY_ACCEPTED', 'CONFIRMATION_EMAIL_SENT_IF_NEEDED']
} as const;