/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Flexible Leaves API
 * API Description for leave management app
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Post2faSetup200,
  PostAuthResetPasswordRequest200,
  User
} from './flexibleLeavesAPI.schemas';


export const getPost2faSetupResponseMock = (overrideResponse: Partial< Post2faSetup200 > = {}): Post2faSetup200 => ({qrCodeUrl: faker.helpers.arrayElement([faker.internet.url(), undefined]), secret: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPostAuthLoginResponseMock = (overrideResponse: Partial< User > = {}): User => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), firstName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lastName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), role: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), enabled2FA: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), ...overrideResponse})

export const getPostAuthResetPasswordRequestResponseMock = (overrideResponse: Partial< PostAuthResetPasswordRequest200 | void > = {}): PostAuthResetPasswordRequest200 | void => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getPost2faSetupMockHandler = (overrideResponse?: Post2faSetup200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Post2faSetup200> | Post2faSetup200)) => {
  return http.post('*/2fa/setup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPost2faSetupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPost2faVerifySetupMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/2fa/verify-setup', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getDelete2faDisableMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/2fa/disable', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPost2faRecoverMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/2fa/recover', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPost2faConfirmRecoverMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/2fa/confirm-recover', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostAuthSignupMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/auth/signup', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostAuthVerifySignupMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/auth/verify-signup', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPostAuthLoginMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
  return http.post('*/auth/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAuthLoginResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostAuthLogoutMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/auth/logout', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getPostAuthRefreshMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/auth/refresh', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getPostAuthResetPasswordRequestMockHandler = (overrideResponse?: PostAuthResetPasswordRequest200 | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostAuthResetPasswordRequest200 | void> | PostAuthResetPasswordRequest200 | void)) => {
  return http.post('*/auth/reset-password/request', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAuthResetPasswordRequestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostAuthResetPasswordMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/auth/reset-password', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getFlexibleLeavesAPIMock = () => [
  getPost2faSetupMockHandler(),
  getPost2faVerifySetupMockHandler(),
  getDelete2faDisableMockHandler(),
  getPost2faRecoverMockHandler(),
  getPost2faConfirmRecoverMockHandler(),
  getPostAuthSignupMockHandler(),
  getPostAuthVerifySignupMockHandler(),
  getPostAuthLoginMockHandler(),
  getPostAuthLogoutMockHandler(),
  getPostAuthRefreshMockHandler(),
  getPostAuthResetPasswordRequestMockHandler(),
  getPostAuthResetPasswordMockHandler()]
